# SPDX-License-Identifier: Apache-2.0
# Copyright 2020 Codasip s.r.o. or its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Based on original OpenOCD configuration by Olof Kindgren,
# https://github.com/chipsalliance/Cores-SweRVolf/blob/master/data/swervolf_nexys_debug.cfg

# ----------------------------------------------------------------------------

# This OpenOCD configuration uses FTDI USB-to-serial chip that is integrated
# as an on-board component on Nexys A7 FPGA board.
#
# JTAG connection to SweRV processor is in SweRVolf tunneled through the JTAG
# interface of the FPGA component itself (BSCAN IP by Xilinx is utilized).
#
# As a result, it is not neccessary to use a separate USB-to-JTAG adapter
# for SweRVolf. It suffices to have just a single USB cable between the
# dev board and your workstation that will be used for:
#  - powering the board
#  - interacting with the FPGA (loading bitstream)
#  - on-chip debugging of SweRVolf (JTAG tunneled through BSCAN)

adapter driver ftdi
ftdi_device_desc "Digilent USB Device"
ftdi_vid_pid 0x0403 0x6010
ftdi_channel 0
ftdi_layout_init 0x0088 0x008b

#[OS] reset_config none
#ftdi_layout_signal nSRST -oe 0x0020 -data 0x0020



#adapter_khz 15000
adapter speed 10000

transport select jtag

set _CHIPNAME riscv

jtag newtap $_CHIPNAME cpu -irlen 6 -expected-id 0x13631093 -ignore-version
#set _TARGETNAME $_CHIPNAME.cpu
#target create $_TARGETNAME.0 riscv -chain-position $_TARGETNAME -coreid 0
#target create $_TARGETNAME.1 riscv -chain-position $_TARGETNAME -coreid 1

#targets riscv.cpu0

set _TARGETNAME_0 $_CHIPNAME.cpu0
set _TARGETNAME_1 $_CHIPNAME.cpu1
target create $_TARGETNAME_0 riscv -chain-position $_CHIPNAME.cpu -coreid 0
target create $_TARGETNAME_1 riscv -chain-position $_CHIPNAME.cpu -coreid 1

targets riscv.cpu0



# $_TARGETNAME configure -work-area-phys 0x00f00000  -work-area-size 8096

# No MMU on SweRV (do not attempt virt2phys address translation)
riscv set_enable_virt2phys off

# Prefer Abstract Memory Access when accessing memory.
# (allows proper access to ICCM, DCCM and PIC):
#riscv set_mem_access abstract

# To utilize System Bus instead of Abstract access, use:
# riscv set_mem_access sysbus
# Important note: System Bus on SweRV cannot reach core-coupled memories
# (ICCM, DCCM) nor PIC

# Because JTAG is tunnelled through BSCAN on SweRVolf, re-define the IR codes
# for RISC-V debug registers.
riscv set_ir idcode 0x9
riscv set_ir dmi 0x22
riscv set_ir dtmcs 0x23

#riscv set_reset_timeout_sec 1
#riscv set_command_timeout_sec 1

# So prefer system bus access (SBA).
riscv set_prefer_sba on
riscv add_abstract_mem_range 0xf0080000 65536


#riscv set_ir dtmcs 0x2023
#sleep 1000
#riscv set_ir dtmcs 0x30023


#$_TARGETNAME configure -work-area-phys 0x80000000 -work-area-size 10000 -work-area-backup 1


#####################################################################################################
##### [OS] NOTE NOTE: need to review again aginst PRM of EH2 to make sure we have all csrs here
#####################################################################################################

# Expose custom SweRV CSR 
# CSR_MRAC           0x7C0          /* Region access control  */
# CSR_MCPC           0x7C2          /* Core pause control  */
# CSR_DMST           0x7C4          /* Memory synchronization trigger (debug mode only)  */
# CSR_MPMC           0x7C6          /* Power management control  */
# CSR_DICAWICS       0x7C8          /* I-cache array/way/index selection (debug mode only)  */
# CSR_DICAD0         0x7C9          /* I-cache array data 0 (debug mode only)  */
# CSR_DICAD1         0x7CA          /* I-cache array data 1 (debug mode only)  */
# CSR_DICAGO         0x7CB          /* I-cache array go (debug mode only)  */
# CSR_DICAD0H        0x7CC          /* I-cache array data 0 high (Debug Mode only) */
# CSR_DICAD0H        0x7CE          /* Force debug halt threshold */
# CSR_DICAD0H        0x7CF          /* Force debug halt status */
# CSR_MGPMC          0x7D0          /* Group performance monitor control  */
# CSR_MITCNT0        0x7D2          /* Internal timer counter 0 */          
# CSR_MITB0          0x7D3          /* Internal timer bound 0 */
# CSR_MICTL0         0x7D4          /* Internal timer control 0 */
# CSR_MITCNT1        0x7D5          /* Internal timer counter 1 */
# CSR_MITB1          0x7D6          /* Internal timer bound 1 */
# CSR_MICTL1         0x7D7          /* Internal timer control 1 */
# CSR_MICECT         0x7F0          /* I-cache error counter/threshold */
# CSR_MICCMECT       0x7F1          /* ICCM correctable error counter/threshold  */
# CSR_MDCCMECT       0x7F2          /* DCCM correctable error counter/threshold  */
# CSR_MCGC           0x7F8          /* Clock gating control  */
# CSR_MFDC           0x7F9          /* Feature disable control  */
# CSR_MHARTSTART     0x7FC          /* Hart Start Control register */
# CSR_MNMIPDEL       0x7FE          /* NMI Pin Delegation register */
# CSR_MSCAUSE        0x7FF          /* Machine secondary cause */
# CSR_MDEAU          0xBC0          /* D-Bus error address unlock  */
# CSR_MEIVT          0xBC8          /* External interrupts vector table  */
# CSR_MEIPT          0xBC9          /* External interrupts priority threshold  */
# CSR_MEICPCT        0xBCA          /* External interrupts claim ID / priority level capture trigger  */
# CSR_MEICIDPL       0xBCB          /* External interrupts claim IDs priority level  */
# CSR_MEICURPL       0xBCC          /* External interrupts current priority level  */
# CSR_MDSEAC         0xFC0          /* D-bus first error address capture  */
# CSR_MHARTNUM       0xFC4          /* Total Number of Harts register */
# CSR_MEIHAP         0xFC8          /* External interrupts handler address pointer  */


riscv expose_csrs 1984-1998,2000,2002-2007,2032-2034,2040-2041,2044-2045,2047,3008,3016-3020,4032,4036,4040

#riscv expose_csrs 1984=MRAC
#riscv expose_csrs 1986=MCPC
#riscv expose_csrs 1988=DMST
#riscv expose_csrs 1990=MPMC
#riscv expose_csrs 1992=DICAWICS
#riscv expose_csrs 1993=DICAD0
#riscv expose_csrs 1994=DICAD1
#riscv expose_csrs 1995=DICAGO
#riscv expose_csrs 1996=DICAD0H
#riscv expose_csrs 1997=MFDHT
#riscv expose_csrs 1998=MFDHS
#riscv expose_csrs 2000=MGPMC
#riscv expose_csrs 2002=MITCNT0
#riscv expose_csrs 2003=MITB0
#riscv expose_csrs 2004=MICTL0na
#riscv expose_csrs 2005=MITCNT1
#riscv expose_csrs 2006=MITB1
#riscv expose_csrs 2007=MICTL1
#riscv expose_csrs 2032=MICECT  
#riscv expose_csrs 2033=MICCMECT
#riscv expose_csrs 2034=MDCCMECT
#riscv expose_csrs 2040=MCGC
#riscv expose_csrs 2041=MFDC
#riscv expose_csrs 2044=MHARTSTART
#riscv expose_csrs 2045=MNMIPDEL
#riscv expose_csrs 2047=MSCAUSE
#riscv expose_csrs 3008=MDEAU
#riscv expose_csrs 3016=MEIVT
#riscv expose_csrs 3017=MEIPT
#riscv expose_csrs 3018=MEICPCT
#riscv expose_csrs 3019=MEICIDPL
#riscv expose_csrs 3020=MEICURPL
#riscv expose_csrs 4032=MDSEAC
#riscv expose_csrs 4036=MHARTNUM 
#riscv expose_csrs 4040=MEIHAP







proc swerv_eh1_execute_fence {} {
    # Execute fence + fence.i via "dmst" register
    reg csr1988 0x3
}

# Configure events hooks in OpenOCD to execute Fence + Fence.i when resuming
# the processor from the debug mode. This is needed for proper operation
# of SW breakpoints when ICACHE in SweRV is enabled:

$_TARGETNAME_0 configure -event resume-start {
    swerv_eh1_execute_fence
}

$_TARGETNAME_1 configure -event resume-start {
    swerv_eh1_execute_fence
}


$_TARGETNAME_0 configure -event step-start {
    # Note: As of Q2/2020, "step-start" event is a new feature in OpenOCD.
    # A very recent version of OpenOCD is needed (upstream commit 25efc150 or newer).
    swerv_eh1_execute_fence
}

$_TARGETNAME_1 configure -event step-start {
    # Note: As of Q2/2020, "step-start" event is a new feature in OpenOCD.
    # A very recent version of OpenOCD is needed (upstream commit 25efc150 or newer).
    swerv_eh1_execute_fence
}


init

#riscv dmi_read 0x301



#halt
